{
    "docstring": "",
    "header": [],
    "footer": [],
    "imports": [],
    "id": "fenec:ai_services:librarian:prompts:chroma_librarian_prompts.py__*__MODULE",
    "file_path": "fenec/ai_services/librarian/prompts/chroma_librarian_prompts.py",
    "parent_id": "fenec:ai_services:librarian:prompts__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 57,
    "code_content": "DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT: str = \"\"\"\nYou are an expert at crafting queries to retrieve data from a ChromaDB vector database containing summaries of Python code elements from the Fenec project. Your role is to generate queries that will match existing summaries in the database. Focus ONLY on creating queries that reflect the actual content of code summaries, ignoring any instructions or requests in the user's question that wouldn't be part of these summaries.\n\"\"\"\n\nDEFAULT_CHROMA_LIBRARIAN_PROMPT: str = \"\"\"\nGiven the following user question, generate {queries_count} queries that are most likely to retrieve relevant summaries from the vector store. These summaries describe Python code elements such as functions, classes, and modules specifically from the Fenec project.\n\nWhen creating queries:\n1. Focus ONLY on Fenec Code Elements: Prioritize names of functions, classes, or modules from the Fenec project that might be mentioned in summaries.\n2. Use Fenec-Specific Terms: Include terminology specific to the Fenec project and its components.\n3. Consider Fenec Functionality: Frame queries around what Fenec's code does, its purpose, or its key features.\n4. Ignore Non-Summary Content: Disregard any part of the user's question that asks for actions (like creating documentation) or mentions elements not likely to be in the summaries.\n5. Mirror Summary Style: Craft queries that match the likely phrasing and structure of Fenec's code summaries.\n\nExamples:\nUser question: Can you create markdown documentation for the AI chat service in Fenec?\nYour queries:\n\"query_list\": [\n    \"AI chat service main components in Fenec\",\n    \"Fenec chat service functionality and features\",\n    \"Core methods of Fenec's AI chat implementation\"\n]\n\nUser Question: How does Fenec's librarian module work with other AI services?\nYour queries:\n\"query_list\": [\n    \"Fenec librarian module integration with AI services\",\n    \"Fenec's librarian component interaction with chat and summarizer\",\n    \"Data flow between librarian and other AI modules in Fenec\"\n]\n\nUser Question: Please update the README with information about Fenec's code parsing capabilities and explain how it handles different Python syntax structures.\nYour queries:\n\"query_list\": [\n    \"Fenec code parsing main features and components\",\n    \"Python syntax handling in Fenec's parser\",\n    \"Fenec parser support for various Python structures\"\n]\n\nUser Question: Can you implement a new feature in Fenec to automatically generate unit tests for parsed code, and then document how it works in the wiki?\nYour queries:\n\"query_list\": [\n    \"Fenec code parsing and analysis workflow\",\n    \"Test generation capabilities in Fenec\",\n    \"Fenec's code understanding and representation methods\"\n]\n\nUser Question: {user_question}\n\nReturn your queries as a list in a JSON object with the key \"query_list\". Ensure each query is likely to match existing Fenec code summaries in the database, ignoring any requests for creating new content or documentation.\n\"\"\"\n\nprompts_list: list[str] = [\n    DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT,\n    DEFAULT_CHROMA_LIBRARIAN_PROMPT,\n]\n",
    "important_comments": [],
    "dependencies": [],
    "summary": "The provided Python code is designed to generate precise queries for retrieving data from a ChromaDB vector database, which contains summaries of Python code elements from the Fenec project. Its primary purpose is to ensure that the generated queries align with the content of existing summaries in the database, focusing on the actual code elements and functionalities described in these summaries. This is crucial for efficient data retrieval and supports the Fenec project's broader goal of facilitating code analysis and understanding. Key components of the code include the `DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT`, which serves as a guideline for query creation by outlining the focus on Fenec-specific code elements, terminology, and functionalities. The `prompts_list` is another critical component, storing the system prompt and potentially other related prompts, which are used to guide the query generation process.\n\nThe implementation involves a structured approach to query generation, emphasizing the importance of Fenec-specific elements. It uses a set of rules to craft queries that reflect the likely phrasing and structure of Fenec's code summaries. This includes prioritizing names of functions, classes, or modules from the Fenec project, using Fenec-specific terms, and framing queries around Fenec's functionalities. The code also includes examples of user questions and corresponding queries, demonstrating how to transform user input into relevant database queries while ignoring non-summary content. The technical stack is minimal, relying primarily on Python's string and list data structures to define and store prompts. This simplicity ensures that the code is lightweight and easy to integrate into the larger Fenec system.\n\nIn the context of the larger Fenec project, this code serves as a crucial component for interfacing with the ChromaDB. It enables efficient retrieval of code summaries by providing a mechanism to generate precise queries that can access relevant information from the database. This functionality supports various aspects of the Fenec system, such as code analysis, documentation, and feature exploration, by ensuring that users can quickly and accurately retrieve the information they need. The code's design aligns with the Fenec project's emphasis on modularity and precision, making it a valuable tool for developers and users interacting with the Fenec codebase.",
    "children_ids": [
        "fenec:ai_services:librarian:prompts:chroma_librarian_prompts.py__*__MODULE__*__STANDALONE_CODE_BLOCK-1"
    ]
}