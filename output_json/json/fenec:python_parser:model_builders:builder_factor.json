{
    "docstring": "",
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Any",
                    "as_name": "",
                    "local_block_id": ""
                },
                {
                    "name": "Callable",
                    "as_name": "",
                    "local_block_id": ""
                },
                {
                    "name": "Literal",
                    "as_name": "",
                    "local_block_id": ""
                },
                {
                    "name": "overload",
                    "as_name": "",
                    "local_block_id": ""
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": ""
        },
        {
            "import_names": [
                {
                    "name": "logging_decorator",
                    "as_name": "",
                    "local_block_id": "fenec:utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator"
                }
            ],
            "imported_from": "fenec.utilities.logger.decorators",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:utilities:logger:decorators.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": "",
                    "local_block_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": "",
                    "local_block_id": "fenec:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModuleModelBuilder",
                    "as_name": "",
                    "local_block_id": "fenec:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.module_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:module_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "StandaloneBlockModelBuilder",
                    "as_name": "",
                    "local_block_id": "fenec:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.standalone_block_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BlockType",
                    "as_name": "",
                    "local_block_id": "fenec:models:enums.py__*__MODULE__*__CLASS-BlockType"
                }
            ],
            "imported_from": "fenec.models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:models:enums.py__*__MODULE"
        }
    ],
    "id": "fenec:python_parser:model_builders:builder_factory.py__*__MODULE",
    "file_path": "fenec/python_parser/model_builders/builder_factory.py",
    "parent_id": "fenec:python_parser:model_builders__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 224,
    "code_content": "from typing import Any, Callable, Literal, overload\n\nfrom fenec.utilities.logger.decorators import logging_decorator\n\nfrom fenec.python_parser.model_builders.class_model_builder import ClassModelBuilder\nfrom fenec.python_parser.model_builders.function_model_builder import (\n    FunctionModelBuilder,\n)\nfrom fenec.python_parser.model_builders.module_model_builder import (\n    ModuleModelBuilder,\n)\nfrom fenec.python_parser.model_builders.standalone_block_model_builder import (\n    StandaloneBlockModelBuilder,\n)\n\nfrom fenec.models.enums import BlockType\n\n\nclass BuilderFactory:\n    \"\"\"\n    A factory class for creating instances of different types of model builders.\n\n    This class uses a strategy pattern to map each block type to a corresponding builder creation function. Depending on the block type specified, it creates and returns an instance of the appropriate model builder class.\n\n    The factory supports creating builders for modules, classes, functions, and standalone code blocks.\n\n    Attributes:\n        - _creation_strategies (dict[BlockType, Callable[..., Any]]): A dictionary mapping block types to their corresponding builder creation functions.\n\n    Example:\n        ```Python\n        # This example demonstrates how to create a builder instance using the BuilderFactory.\n        builder = BuilderFactory.create_builder_instance(\n            block_type=BlockType.CLASS,\n            id='class1',\n            name='MyClass',\n            parent_id='module1'\n        )\n        # This will create an instance of ClassModelBuilder for a class named 'MyClass'.\n        ```\n\n    Methods:\n        - `@overload create_builder_instance(block_type: Literal[BlockType.MODULE], *, id: str, file_path: str, parent_id: str) -> ModuleModelBuilder`:\n            Creates a ModuleModelBuilder instance for building module models.\n        - `@overload create_builder_instance(block_type: Literal[BlockType.CLASS], *, id: str, name: str, parent_id: str, file_path: str) -> ClassModelBuilder`:\n            Creates a ClassModelBuilder instance for building class models.\n        - `@overload create_builder_instance(block_type: Literal[BlockType.FUNCTION], *, id: str, name: str, parent_id: str, file_path: str) -> FunctionModelBuilder`:\n            Creates a FunctionModelBuilder instance for building function models.\n        - `@overload create_builder_instance(block_type: Literal[BlockType.STANDALONE_CODE_BLOCK], *, id: str, parent_id: str, file_path: str) -> StandaloneBlockModelBuilder`:\n            Creates a StandaloneBlockModelBuilder instance for building standalone code block models.\n        - `@logging_decorator() @staticmethod create_builder_instance(block_type: BlockType, *, id: str, name: str | None = None, parent_id: str | None = None, file_path: str | None = None) -> Union[ModuleModelBuilder, ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]`:\n            Creates and returns an instance of a model builder based on the specified block type.\n    \"\"\"\n\n    _creation_strategies: dict[BlockType, Callable[..., Any]] = {\n        BlockType.MODULE: lambda id, file_path, name, parent_id: ModuleModelBuilder(\n            id=id,\n            file_path=file_path,\n            parent_id=parent_id,\n        ),\n        BlockType.CLASS: lambda id, name, parent_id, file_path: ClassModelBuilder(\n            id=id,\n            class_name=name,\n            parent_id=parent_id,\n            file_path=file_path,\n        ),\n        BlockType.FUNCTION: lambda id, name, parent_id, file_path: FunctionModelBuilder(\n            id=id,\n            function_name=name,\n            parent_id=parent_id,\n            file_path=file_path,\n        ),\n        BlockType.STANDALONE_CODE_BLOCK: lambda id, parent_id, name, file_path: StandaloneBlockModelBuilder(\n            id=id,\n            parent_id=parent_id,\n            file_path=file_path,\n        ),\n    }\n\n    @staticmethod\n    @overload\n    def create_builder_instance(\n        block_type: Literal[BlockType.MODULE],\n        *,\n        id: str,\n        file_path: str,\n        parent_id: str,\n    ) -> ModuleModelBuilder:\n        \"\"\"\n        Creates a ModuleModelBuilder instance for building module models.\n\n        Args:\n            - block_type: Specifies that a ModuleModelBuilder is to be created.\n            - id (str): The unique identifier for the module model.\n            - file_path (str): The file path of the module.\n\n        Returns:\n            - ModuleModelBuilder: An instance of ModuleModelBuilder.\n        \"\"\"\n        ...\n\n    @staticmethod\n    @overload\n    def create_builder_instance(\n        block_type: Literal[BlockType.CLASS],\n        *,\n        id: str,\n        name: str,\n        parent_id: str,\n        file_path: str,\n    ) -> ClassModelBuilder:\n        \"\"\"\n        Creates a ClassModelBuilder instance for building class models.\n\n        Args:\n            - block_type: Specifies that a ClassModelBuilder is to be created.\n            - id (str): The unique identifier for the class model.\n            - name (str): The name of the class.\n            - parent_id (str): The identifier of the parent model.\n\n        Returns:\n            - ClassModelBuilder: An instance of ClassModelBuilder.\n        \"\"\"\n        ...\n\n    @staticmethod\n    @overload\n    def create_builder_instance(\n        block_type: Literal[BlockType.FUNCTION],\n        *,\n        id: str,\n        name: str,\n        parent_id: str,\n        file_path: str,\n    ) -> FunctionModelBuilder:\n        \"\"\"\n        Creates a FunctionModelBuilder instance for building function models.\n\n        Args:\n            - block_type: Specifies that a FunctionModelBuilder is to be created.\n            - id (str): The unique identifier for the function model.\n            - name (str): The name of the function.\n            - parent_id (str): The identifier of the parent model.\n\n        Returns:\n            - FunctionModelBuilder: An instance of FunctionModelBuilder.\n        \"\"\"\n        ...\n\n    @staticmethod\n    @overload\n    def create_builder_instance(\n        block_type: Literal[BlockType.STANDALONE_CODE_BLOCK],\n        *,\n        id: str,\n        parent_id: str,\n        file_path: str,\n    ) -> StandaloneBlockModelBuilder:\n        \"\"\"\n        Creates a StandaloneBlockModelBuilder instance for building standalone code block models.\n\n        Args:\n            - block_type: Specifies that a StandaloneBlockModelBuilder is to be created.\n            - id (str): The unique identifier for the standalone code block model.\n            - parent_id (str): The identifier of the parent model.\n\n        Returns:\n            - StandaloneBlockModelBuilder: An instance of StandaloneBlockModelBuilder.\n        \"\"\"\n        ...\n\n    @logging_decorator()\n    @staticmethod\n    def create_builder_instance(\n        block_type: BlockType,\n        *,\n        id: str,\n        name: str | None = None,\n        parent_id: str | None = None,\n        file_path: str | None = None,\n    ) -> (\n        ModuleModelBuilder\n        | ClassModelBuilder\n        | FunctionModelBuilder\n        | StandaloneBlockModelBuilder\n    ):\n        \"\"\"\n        Creates and returns an instance of a model builder based on the specified block type.\n\n        Depending on the block type (module, class, function, standalone code block), it creates an instance of the corresponding model builder class.\n\n        Args:\n            - block_type (BlockType): The type of code block for which the builder is to be created.\n            - id (str): The unique identifier for the builder.\n            name (str | None): The name of the code block (relevant for class or function blocks).\n            parent_id (str | None): The identifier of the parent model (if applicable).\n            file_path (str | None): The file path of the module (relevant for module blocks).\n\n        Returns:\n            Union[ModuleModelBuilder, ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]:\n            An instance of the appropriate model builder class.\n\n        Raises:\n            ValueError: If an unknown block type is provided.\n\n        Example:\n            ```Python\n            # This example demonstrates how to create a builder instance using the BuilderFactory.\n            builder = BuilderFactory.create_builder_instance(\n                block_type=BlockType.CLASS,\n                id='class1',\n                name='MyClass',\n                parent_id='module1'\n            )\n            # This will create an instance of ClassModelBuilder for a class named 'MyClass'.\n            ```\n        \"\"\"\n\n        if block_type not in BuilderFactory._creation_strategies:\n            raise ValueError(f\"Unknown node type: {block_type}\")\n        return BuilderFactory._creation_strategies[block_type](\n            id=id, name=name, parent_id=parent_id, file_path=file_path\n        )\n",
    "important_comments": [],
    "dependencies": [],
    "summary": "The provided Python code defines a `BuilderFactory` class, a pivotal component within the `fenec` package's Python parser module. Its primary purpose is to dynamically create instances of model builders for various code block types, such as modules, classes, functions, and standalone code blocks. This functionality is crucial for systems that require detailed code analysis or transformation, as it allows for the construction of abstract representations of Python code structures. The `BuilderFactory` employs the strategy design pattern, mapping each `BlockType` enum to a corresponding lambda function that instantiates the appropriate model builder class, including `ModuleModelBuilder`, `ClassModelBuilder`, `FunctionModelBuilder`, and `StandaloneBlockModelBuilder`.\n\nKey components of this implementation include the `BuilderFactory` class itself, which contains a dictionary `_creation_strategies` that maps `BlockType` enums to their respective builder creation functions. The `create_builder_instance` method is central to this class, utilizing Python's `@overload` decorator to define multiple method signatures for handling different block types with specific parameters. This method is also decorated with a `@logging_decorator` to enable logging of its operations, ensuring traceability and ease of debugging. The use of lambda functions within the `_creation_strategies` dictionary allows for concise and efficient instantiation of the model builders, while the strategy pattern promotes flexibility and scalability, allowing for easy extension to support additional block types in the future.\n\nThe implementation leverages Python's type hinting and overload capabilities from the `typing` module to provide a robust and flexible interface for creating builder instances. The `logging_decorator` from `fenec.utilities.logger.decorators` is used to add logging functionality to the `create_builder_instance` method, providing insights into the builder creation process. This method utilizes a dictionary-based strategy pattern, a common design pattern for encapsulating a family of algorithms and making them interchangeable, allowing the `BuilderFactory` to efficiently manage the creation of different builder instances based on the specified block type.\n\nThe technical stack includes the `fenec` library, which provides the model builder classes and utilities necessary for constructing abstract representations of Python code structures. The `typing` module is used extensively for type annotations and method overloads, enhancing code readability and maintainability. The `logging_decorator` is a custom utility that likely integrates with a broader logging framework within the system, providing detailed logs for debugging and monitoring purposes.\n\nIn the context of the larger `fenec` project, this code is a crucial component of the Python parser module, designed to facilitate the construction of abstract representations of Python code structures. The `BuilderFactory` interacts with other components by providing a standardized way to instantiate model builders, which can then be used for further analysis or transformation of Python code. This modular approach allows the `fenec` package to efficiently parse and model Python code, supporting various use cases such as code analysis, refactoring, and transformation within the broader software development lifecycle.",
    "children_ids": [
        "fenec:python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory"
    ]
}