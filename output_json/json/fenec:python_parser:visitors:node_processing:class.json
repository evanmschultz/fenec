{
    "docstring": "",
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Sequence",
                    "as_name": "",
                    "local_block_id": ""
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": ""
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": "",
                    "local_block_id": ""
                }
            ],
            "imported_from": "",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": ""
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": "",
                    "local_block_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "DecoratorModel",
                    "as_name": "",
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-DecoratorModel"
                },
                {
                    "name": "ClassKeywordModel",
                    "as_name": "",
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-ClassKeywordModel"
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "fenec.python_parser.visitors.node_processing.common_functions",
                    "as_name": "common_functions",
                    "local_block_id": ""
                }
            ],
            "imported_from": "",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "PositionData",
                    "as_name": "",
                    "local_block_id": "fenec:utilities:processing_context.py__*__MODULE__*__CLASS-PositionData"
                }
            ],
            "imported_from": "fenec.utilities.processing_context",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:utilities:processing_context.py__*__MODULE"
        }
    ],
    "id": "fenec:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE",
    "file_path": "fenec/python_parser/visitors/node_processing/class_def_functions.py",
    "parent_id": "fenec:python_parser:visitors:node_processing__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 119,
    "code_content": "from typing import Sequence\n\nimport libcst\n\nfrom fenec.python_parser.model_builders.class_model_builder import ClassModelBuilder\nfrom fenec.models.models import ClassKeywordModel, DecoratorModel\nimport fenec.python_parser.visitors.node_processing.common_functions as common_functions\n\nfrom fenec.utilities.processing_context import PositionData\n\n\ndef process_class_def(\n    node: libcst.ClassDef,\n    position_data: PositionData,\n    builder: ClassModelBuilder,\n) -> None:\n    \"\"\"\n    Processes a libcst.ClassDef node to build a class model.\n\n    Extracts various components of a class definition such as its docstring, code content, base classes, decorators, and keywords,\n    and updates the provided ClassModelBuilder with these details.\n\n    Args:\n        - node (libcst.ClassDef): The class definition node from the CST.\n        - position_data (PositionData): Positional data for the class in the source code.\n        - builder (ClassModelBuilder): The builder used to construct the class model.\n\n    Example:\n        ```Python\n        class_builder = ClassModelBuilder(id=\"class1\", ...)\n        process_class_def(class_node, position_data, class_builder)\n        # Processes the class definition and updates the class builder.\n        ```\n    \"\"\"\n\n    docstring: str | None = node.get_docstring()\n    code_content: str = common_functions.extract_code_content(node)\n    bases: list[str] | None = _extract_bases(node.bases)\n    keywords: list[ClassKeywordModel] | None = _extract_keywords(node.keywords)\n    decorators: list[DecoratorModel] | None = common_functions.extract_decorators(\n        node.decorators\n    )\n\n    (\n        builder.set_docstring(docstring)\n        .set_code_content(code_content)\n        .set_start_line_num(position_data.start)\n        .set_end_line_num(position_data.end)\n    )\n    builder.set_bases(bases).set_decorators(decorators).set_keywords(keywords)\n\n\ndef _extract_bases(bases: Sequence[libcst.Arg]) -> list[str] | None:\n    \"\"\"\n    Extracts the base classes from a sequence of libcst.Arg representing class bases.\n\n    Args:\n        - bases (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class base classes.\n\n    Returns:\n        - list[str] | None: A list of base class names, or None if there are no bases.\n\n    Example:\n        ```Python\n        class_bases = _extract_bases(class_node.bases)\n        # Returns a list of base class names from the class definition.\n        ```\n    \"\"\"\n\n    bases_list: list[str] = []\n    for base in bases:\n        if (\n            isinstance(base, libcst.Arg)\n            and isinstance(base.value, libcst.Name)\n            and base.value.value\n        ):\n            bases_list.append(base.value.value)\n    return bases_list if bases_list else None\n\n\ndef _extract_keywords(\n    keywords: Sequence[libcst.Arg],\n) -> list[ClassKeywordModel] | None:\n    \"\"\"\n    Extracts class keywords (like metaclass) from a sequence of libcst.Arg representing class keywords.\n\n    Args:\n        - keywords (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class keywords.\n\n    Returns:\n        - list[ClassKeywordModel] | None: A list of ClassKeywordModel objects representing each keyword,\n        or None if there are no keywords.\n\n    Example:\n        ```Python\n        class_keywords = _extract_keywords(class_node.keywords)\n        # Returns a list of ClassKeywordModel objects for each keyword in the class definition.\n        ```\n    \"\"\"\n\n    keywords_list: list[ClassKeywordModel] = []\n\n    for keyword in keywords:\n        if keyword.keyword is not None:\n            keyword_name: str = keyword.keyword.value\n            args: str | None = (\n                common_functions.extract_stripped_code_content(keyword.value)\n                if keyword.value\n                else None\n            )\n            content: str = common_functions.extract_stripped_code_content(keyword)\n\n            keyword_model = ClassKeywordModel(\n                content=content, keyword_name=keyword_name, args=args\n            )\n            keywords_list.append(keyword_model)\n\n    return keywords_list if keywords_list else None\n",
    "important_comments": [],
    "dependencies": [],
    "summary": "This code is designed to process Python class definitions using the `libcst` library to build a comprehensive class model, which is crucial for analyzing and transforming Python code within the `fenec` project. Its primary purpose is to extract and organize various components of a class definition, such as docstrings, code content, base classes, decorators, and keywords, and update a `ClassModelBuilder` with these details. This functionality is significant for tasks like code analysis, refactoring, and documentation generation, providing a structured representation of class definitions that facilitates a deeper understanding of the codebase.\n\nKey components include the `process_class_def` function, which orchestrates the extraction and updating process by interacting with the `ClassModelBuilder` to set the extracted attributes; `_extract_bases`, which retrieves base class names from a sequence of `libcst.Arg` nodes, ensuring that only valid base class names are included; and `_extract_keywords`, which extracts class keywords like metaclasses and constructs `ClassKeywordModel` objects, encapsulating the keyword name, arguments, and content. The `common_functions` module is also utilized for extracting code content and decorators, ensuring consistent and accurate data extraction.\n\nThe implementation leverages the `libcst` library for parsing and manipulating Python code as concrete syntax trees, allowing for precise and lossless code transformations. It employs a builder pattern with the `ClassModelBuilder`, which is incrementally updated with the extracted details, ensuring a clear and organized construction of the class model. This pattern allows for easy extension and modification, supporting the setting of multiple attributes such as docstring, code content, start and end line numbers, base classes, decorators, and keywords. The code also uses list comprehensions and type annotations to enhance readability and maintainability.\n\nThe technical stack includes `libcst` for syntax tree manipulation, which provides a robust framework for parsing and transforming Python code. The `fenec` package supplies custom models and utilities, such as `ClassModelBuilder`, `ClassKeywordModel`, and `DecoratorModel`, which facilitate the construction and representation of class models. These components are integral to the `fenec` project's goal of providing detailed and structured representations of Python code.\n\nIn the context of a larger system, this code is part of a Python parser module within the `fenec` project, which likely aims to analyze and transform Python code. It interacts with other components by providing detailed class models that can be used for further analysis, transformation, or documentation generation. This module fits into the broader architecture by serving as a foundational layer that enables higher-level functionalities, such as code refactoring tools, static analysis utilities, or automated documentation systems, thereby enhancing the overall capabilities of the `fenec` project. By extracting and organizing class information, it supports tasks like dependency analysis, code optimization, and automated documentation generation, contributing to a comprehensive understanding of class structures within the codebase.",
    "children_ids": [
        "fenec:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-process_class_def",
        "fenec:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-_extract_bases",
        "fenec:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-_extract_keywords"
    ]
}