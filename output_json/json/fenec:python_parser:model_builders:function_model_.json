{
    "docstring": "",
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Any",
                    "as_name": "",
                    "local_block_id": ""
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": ""
        },
        {
            "import_names": [
                {
                    "name": "BaseModelBuilder",
                    "as_name": "",
                    "local_block_id": "fenec:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.base_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:base_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "logging_decorator",
                    "as_name": "",
                    "local_block_id": "fenec:utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator"
                }
            ],
            "imported_from": "fenec.utilities.logger.decorators",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:utilities:logger:decorators.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "DecoratorModel",
                    "as_name": "",
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-DecoratorModel"
                },
                {
                    "name": "ParameterListModel",
                    "as_name": "",
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-ParameterListModel"
                },
                {
                    "name": "FunctionSpecificAttributes",
                    "as_name": "",
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes"
                },
                {
                    "name": "FunctionModel",
                    "as_name": "",
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-FunctionModel"
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BlockType",
                    "as_name": "",
                    "local_block_id": "fenec:models:enums.py__*__MODULE__*__CLASS-BlockType"
                }
            ],
            "imported_from": "fenec.models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:models:enums.py__*__MODULE"
        }
    ],
    "id": "fenec:python_parser:model_builders:function_model_builder.py__*__MODULE",
    "file_path": "fenec/python_parser/model_builders/function_model_builder.py",
    "parent_id": "fenec:python_parser:model_builders__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 101,
    "code_content": "from typing import Any\n\nfrom fenec.python_parser.model_builders.base_model_builder import BaseModelBuilder\n\nfrom fenec.utilities.logger.decorators import logging_decorator\nfrom fenec.models.models import (\n    DecoratorModel,\n    FunctionModel,\n    FunctionSpecificAttributes,\n    ParameterListModel,\n)\nfrom fenec.models.enums import BlockType\n\n\nclass FunctionModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a Python function.\n\n    This class extends BaseModelBuilder and specializes in building a detailed model of a Python function, capturing various aspects such as function name, docstring, parameters, decorators, return type, and whether the function is a method or asynchronous.\n\n    Attributes:\n        - function_attributes (FunctionSpecificAttributes): An instance containing attributes specific to a function.\n\n    Args:\n        - id (str): The unique identifier for the function model.\n        - function_name (str): The name of the function.\n        - parent_id (str): The identifier of the parent model (e.g., module or class containing this function).\n    \"\"\"\n\n    def __init__(\n        self, id: str, function_name: str, parent_id: str, file_path: str\n    ) -> None:\n        super().__init__(\n            id=id,\n            file_path=file_path,\n            block_type=BlockType.FUNCTION,\n            parent_id=parent_id,\n        )\n        self.function_attributes = FunctionSpecificAttributes(\n            function_name=function_name,\n            docstring=None,\n            decorators=None,\n            parameters=None,\n            is_method=False,\n            is_async=False,\n            returns=None,\n        )\n\n    def set_parameters_list(\n        self, parameter_list_model: ParameterListModel | None\n    ) -> \"FunctionModelBuilder\":\n        \"\"\"Adds a parameter to the function model.\"\"\"\n        self.function_attributes.parameters = parameter_list_model\n        return self\n\n    def set_decorators(\n        self, decorators: list[DecoratorModel] | None\n    ) -> \"FunctionModelBuilder\":\n        \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\n        if decorators:\n            self.function_attributes.decorators = decorators\n        else:\n            self.function_attributes.decorators = None\n        return self\n\n    def set_docstring(self, docstring: str | None) -> \"FunctionModelBuilder\":\n        \"\"\"Sets the docstring.\"\"\"\n        self.function_attributes.docstring = docstring\n        return self\n\n    def set_return_annotation(self, return_type: str) -> \"FunctionModelBuilder\":\n        \"\"\"Sets the return type.\"\"\"\n        self.function_attributes.returns = return_type\n        return self\n\n    def set_is_method(self, is_method: bool) -> \"FunctionModelBuilder\":\n        \"\"\"Sets the is_method attribute in the function model.\"\"\"\n        self.function_attributes.is_method = is_method\n        return self\n\n    def set_is_async(self, is_async: bool) -> \"FunctionModelBuilder\":\n        \"\"\"Sets the is_async attribute in the function model.\"\"\"\n        self.function_attributes.is_async = is_async\n        return self\n\n    def _get_function_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"\n        Gets the function specific attributes from the builder.\n        \"\"\"\n        return self.function_attributes.model_dump()\n\n    @logging_decorator(message=\"Building function model\")\n    def build(self) -> FunctionModel:\n        \"\"\"Builds and returns the function model instance after building and setting the children models.\"\"\"\n        self.build_children()\n        self.set_children_ids()\n        return FunctionModel(\n            **self._get_common_attributes(),\n            **self._get_function_specific_attributes(),\n        )\n",
    "important_comments": [],
    "dependencies": [],
    "summary": "The `FunctionModelBuilder` class is a pivotal component within the `fenec` framework, specifically designed to construct detailed models of Python functions. Its primary purpose is to encapsulate various attributes of a function, such as its name, docstring, parameters, decorators, return type, and its nature (method or asynchronous), into a structured model. This class extends the `BaseModelBuilder`, inheriting its foundational model-building capabilities while adding function-specific attributes through the `FunctionSpecificAttributes` instance. Key components of this class include: the `__init__` method, which initializes the builder with essential function-specific attributes and links it to its parent model; `set_parameters_list`, `set_decorators`, `set_docstring`, `set_return_annotation`, `set_is_method`, and `set_is_async` methods, which allow for the incremental setting of function attributes; `_get_function_specific_attributes`, which retrieves the function-specific data for model construction; and the `build` method, which finalizes and returns a `FunctionModel` instance, encapsulating all the gathered attributes.\n\nThe implementation leverages the builder design pattern, allowing for a step-by-step construction of the function model. This pattern is evident in the method chaining enabled by returning `self` in setter methods, facilitating a fluent interface for setting multiple attributes. The class also employs a dictionary-based approach to manage function-specific attributes, using the `model_dump` method to extract these attributes for model construction. The use of a logging decorator from `fenec.utilities.logger.decorators` ensures that the building process is traceable, enhancing debuggability and maintainability. The `FunctionSpecificAttributes` data structure is used to store function-specific details, ensuring a clean separation of concerns and enhancing maintainability.\n\nThe technical stack includes the `fenec` library, which provides utilities for model building and logging, and Python's typing module for type annotations, ensuring type safety and clarity. The `FunctionModelBuilder` interacts with several models from `fenec.models.models`, such as `DecoratorModel`, `FunctionModel`, `FunctionSpecificAttributes`, and `ParameterListModel`, to encapsulate various aspects of a function. The `BlockType` enumeration from `fenec.models.enums` is used to specify the type of code block being modeled, in this case, a function.\n\nIn the context of the larger `fenec` framework, this code is part of a Python parser module that systematically analyzes and represents Python code structures. The `FunctionModelBuilder` works in conjunction with other model builders and parsers to provide a detailed and structured representation of Python code, facilitating tasks such as code analysis, refactoring, and documentation generation. Its modular design allows it to be easily integrated with other components of the `fenec` framework, contributing to a comprehensive system for Python code analysis and representation. This integration supports a wide range of applications, from automated code documentation to advanced code refactoring tools, making it a crucial element in the software development lifecycle within the `fenec` ecosystem.",
    "children_ids": [
        "fenec:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
    ]
}