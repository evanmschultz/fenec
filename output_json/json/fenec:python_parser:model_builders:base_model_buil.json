{
    "docstring": "",
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "annotations",
                    "as_name": "",
                    "local_block_id": ""
                }
            ],
            "imported_from": "__future__",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": ""
        },
        {
            "import_names": [
                {
                    "name": "TYPE_CHECKING",
                    "as_name": "",
                    "local_block_id": ""
                },
                {
                    "name": "Any",
                    "as_name": "",
                    "local_block_id": ""
                },
                {
                    "name": "Union",
                    "as_name": "",
                    "local_block_id": ""
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": ""
        },
        {
            "import_names": [
                {
                    "name": "ABC",
                    "as_name": "",
                    "local_block_id": ""
                },
                {
                    "name": "abstractmethod",
                    "as_name": "",
                    "local_block_id": ""
                }
            ],
            "imported_from": "abc",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": ""
        },
        {
            "import_names": [
                {
                    "name": "ImportModel",
                    "as_name": "",
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-ImportModel"
                },
                {
                    "name": "DependencyModel",
                    "as_name": "",
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                },
                {
                    "name": "CommentModel",
                    "as_name": "",
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-CommentModel"
                },
                {
                    "name": "BaseCodeBlockModel",
                    "as_name": "",
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel"
                },
                {
                    "name": "ClassModel",
                    "as_name": "",
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-ClassModel"
                },
                {
                    "name": "FunctionModel",
                    "as_name": "",
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-FunctionModel"
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": "",
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockModel"
                },
                {
                    "name": "BlockType",
                    "as_name": "",
                    "local_block_id": ""
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": "",
                    "local_block_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": "",
                    "local_block_id": "fenec:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModuleModelBuilder",
                    "as_name": "",
                    "local_block_id": "fenec:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.module_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:module_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "StandaloneBlockModelBuilder",
                    "as_name": "",
                    "local_block_id": "fenec:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.standalone_block_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
        }
    ],
    "id": "fenec:python_parser:model_builders:base_model_builder.py__*__MODULE",
    "file_path": "fenec/python_parser/model_builders/base_model_builder.py",
    "parent_id": "fenec:python_parser:model_builders__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 270,
    "code_content": "from __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Any, Union\nfrom abc import ABC, abstractmethod\n\nfrom fenec.models.models import (\n    BaseCodeBlockModel,\n    ClassModel,\n    CommentModel,\n    FunctionModel,\n    ImportModel,\n    DependencyModel,\n    BlockType,\n    StandaloneCodeBlockModel,\n)\n\n\nif TYPE_CHECKING:\n    from fenec.python_parser.model_builders.class_model_builder import (\n        ClassModelBuilder,\n    )\n    from fenec.python_parser.model_builders.function_model_builder import (\n        FunctionModelBuilder,\n    )\n    from fenec.python_parser.model_builders.module_model_builder import (\n        ModuleModelBuilder,\n    )\n    from fenec.python_parser.model_builders.standalone_block_model_builder import (\n        StandaloneBlockModelBuilder,\n    )\n\n\nclass BaseModelBuilder(ABC):\n    \"\"\"\n    Abstract base class for building models of different code blocks.\n\n    This class follows the builder pattern, providing a structured approach to constructing models for various types of code blocks (like modules, classes, functions). It defines common attributes and methods used across all specific model builders.\n\n    Attributes:\n        - id (str): The unique identifier for the code block.\n        - child_builders (list[Union[ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]]):\n            A list of builders for the children code blocks.\n        - child_models (list[\n            ClassModel | FunctionModel | StandaloneCodeBlockModel\n        ] | None): A list of child models built by this builder.\n        - common_attributes (BaseCodeBlockModel): An instance containing common attributes shared across different code block models.\n\n    Example:\n        ```Python\n        # This example demonstrates how a derived builder might be initialized and used.\n        class SomeModelBuilder(BaseModelBuilder):\n            def build(self):\n                # Building logic specific to 'SomeModelBuilder'\n                pass\n        builder = SomeModelBuilder(id='123', block_type=BlockType.CLASS, parent_id='root')\n        builder.set_start_line_num(1).set_end_line_num(10)\n        # Sets the start and end line numbers for the code block.\n        ```\n\n    Methods:\n        - `set_start_line_num(line_num: int) -> Union[...]`: Sets the start line number of the code block model instance.\n        - `set_end_line_num(line_num: int) -> Union[...]`: Sets the end line number of the code block model instance.\n        - `set_code_content(code_content: str) -> Union[...]`: Adds the string containing the content of the code block to the model instance.\n        - `add_important_comment(comment: CommentModel) -> Union[...]`: Adds an important comment to the model instance.\n        - `add_summary(summary: str) -> Union[...]`: Adds a summary to the model instance.\n        - `add_child_builder(child: Union[...]) -> Union[...]`: Adds a child code block to the model instance.\n        - `set_dependencies(dependencies: list[ImportModel | DependencyModel] | None) -> Union[...]`: Sets the dependencies of the model instance.\n        - `update_import_dependency(new_import_model: ImportModel, old_import_model: ImportModel) -> Union[...]`: Updates an import in the model instance.\n        - `build_children() -> None`: Builds the child models of the code block.\n        - `set_children_ids() -> Union[...]`: Sets the children ids of the model instance.\n        - `_get_common_attributes() -> dict[str, Any]`: Returns a dictionary containing the attributes common to all code block models.\n        - `@abstractmethod build() -> None`: Builds and returns the code block model instance.\n    \"\"\"\n\n    def __init__(\n        self, *, id: str, block_type: BlockType, parent_id: str | None, file_path: str\n    ) -> None:\n        self.id: str = id\n        self.child_builders: list[\n            ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\n        ] = []\n        self.child_models: (\n            list[ClassModel | FunctionModel | StandaloneCodeBlockModel] | None\n        ) = None\n\n        self.common_attributes = BaseCodeBlockModel(\n            id=id,\n            file_path=file_path,\n            parent_id=parent_id,\n            block_type=block_type,\n            start_line_num=0,\n            end_line_num=0,\n            code_content=\"\",\n            important_comments=None,\n            children_ids=None,\n            dependencies=None,\n            summary=None,\n        )\n\n    def set_start_line_num(self, line_num: int) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the start line number of the code block model instance.\"\"\"\n        self.common_attributes.start_line_num = line_num\n        return self\n\n    def set_end_line_num(self, line_num: int) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the end line number of the code block model instance.\"\"\"\n        self.common_attributes.end_line_num = line_num\n        return self\n\n    def set_code_content(self, code_content: str) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds the string containing the content of the code block to the model instance.\"\"\"\n        self.common_attributes.code_content = code_content\n        return self\n\n    def add_important_comment(self, comment: CommentModel) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds an important comment to the model instance.\"\"\"\n        if not self.common_attributes.important_comments:\n            self.common_attributes.important_comments = []\n        self.common_attributes.important_comments.append(comment)\n        return self\n\n    def add_summary(self, summary: str) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds a summary to the model instance.\"\"\"\n        self.common_attributes.summary = summary\n        # print(f\"Added summary to {self.common_attributes.id}\")\n        return self\n\n    def add_child_builder(\n        self,\n        child: Union[\n            \"ClassModelBuilder\", \"FunctionModelBuilder\", StandaloneBlockModelBuilder\n        ],\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds a child code block to the model instance.\"\"\"\n        self.child_builders.append(child)\n        return self\n\n    def set_dependencies(\n        self, dependencies: list[ImportModel | DependencyModel] | None\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the dependencies of the model instance.\"\"\"\n        self.common_attributes.dependencies = dependencies\n        return self\n\n    def update_import_dependency(\n        self,\n        new_import_model: ImportModel,\n        old_import_model: ImportModel,\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"\n        Updates an import in the model instance.\n\n        Args:\n            - new_import_model (ImportModel): The updated import model.\n            - old_import_model\n\n        Returns:\n            - BaseModelBuilder: The base model builder instance.\n        \"\"\"\n\n        if self.common_attributes.dependencies:\n            import_model_to_remove: ImportModel | None = None\n            for existing_import_model in self.common_attributes.dependencies:\n                if isinstance(existing_import_model, DependencyModel):\n                    continue\n\n                if (\n                    existing_import_model.import_names == old_import_model.import_names\n                    and existing_import_model.imported_from\n                    == old_import_model.imported_from\n                    and existing_import_model.import_module_type\n                    == old_import_model.import_module_type\n                ):\n                    import_model_to_remove = existing_import_model\n                    break\n\n            if not import_model_to_remove:\n                raise Exception(f\"Could not find import to remove: {old_import_model}\")\n\n            self.common_attributes.dependencies.remove(import_model_to_remove)\n            self.common_attributes.dependencies.append(new_import_model)\n        else:\n            raise Exception(\n                f\"No imports in the builders imports list: {self.common_attributes.dependencies}\"\n            )\n        return self\n\n    def build_children(\n        self,\n    ) -> None:\n        \"\"\"Builds the child models of the code block.\"\"\"\n        if self.child_builders:\n            self.child_models = []\n            for child_builder in self.child_builders:\n                self.child_models.append(child_builder.build())\n                if child_builder.child_models:\n                    self.child_models.extend(child_builder.child_models)\n\n    def set_children_ids(\n        self,\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the children ids of the model instance.\"\"\"\n        self.common_attributes.children_ids = [\n            child.id for child in self.child_builders\n        ]\n        return self\n\n    def _get_common_attributes(self) -> dict[str, Any]:\n        \"\"\"\n        Returns a dictionary containing the attributes common to all code block models.\n        \"\"\"\n        return self.common_attributes.model_dump()\n\n    @abstractmethod\n    def build(\n        self,\n    ) -> None:\n        \"\"\"\n        Builds and returns the code block model instance.\n\n        Returns:\n            CodeBlockModel: The built code block model instance.\n        \"\"\"\n        ...\n",
    "important_comments": [],
    "dependencies": [],
    "summary": "The `BaseModelBuilder` class is an abstract base class within the `fenec` project, designed to facilitate the construction of models representing various code blocks, such as modules, classes, functions, and standalone blocks. Its primary purpose is to implement the builder pattern, providing a structured and consistent approach to assembling code block models with shared attributes and methods, ensuring reusability and extensibility across different code structures. This is significant in the context of code analysis and transformation tasks, where maintaining a uniform approach to model building is crucial for generating accurate and comprehensive representations of code.\n\nKey components of the `BaseModelBuilder` class include methods for setting line numbers (`set_start_line_num`, `set_end_line_num`), managing code content (`set_code_content`), handling comments (`add_important_comment`), and managing dependencies (`set_dependencies`, `update_import_dependency`). It also includes methods for managing child builders and models (`add_child_builder`, `build_children`, `set_children_ids`) and an abstract method `build()` that must be implemented by subclasses to construct specific code block models. These methods collectively enable the step-by-step construction and management of complex code block models, ensuring a hierarchical representation of code structures.\n\nThe implementation leverages the builder pattern, which allows for the incremental and flexible construction of complex objects. The class uses lists to manage child builders and models, enabling hierarchical model construction, and a dictionary to store common attributes, ensuring consistency across different code block models. The design pattern employed ensures that each model builder can be extended to handle specific code block types while maintaining a common interface and shared functionality. The class's methods facilitate the assembly of a complete representation of a code block by setting start and end line numbers, adding code content and comments, managing dependencies, and building child models.\n\nThe technical stack includes Python's standard library, particularly the `abc` module for defining abstract base classes, and type hinting features from the `typing` module, such as `Union`, to ensure type safety and clarity. The code also relies on custom models from the `fenec.models.models` module, including `BaseCodeBlockModel`, `ClassModel`, `FunctionModel`, `ImportModel`, `DependencyModel`, `BlockType`, and `StandaloneCodeBlockModel`, which represent different aspects of code blocks and their dependencies. These models are integral to the system, providing the necessary structure and attributes for the code block models constructed by the `BaseModelBuilder`.\n\nIn the context of a larger Python parsing or analysis tool, this code interacts with other components to build comprehensive models of Python code structures. It aids in tasks such as code analysis, refactoring, or documentation generation by providing a consistent and reusable framework for model construction. The `BaseModelBuilder` class acts as a central piece in this framework, providing a common foundation upon which specific model builders, such as `ClassModelBuilder`, `FunctionModelBuilder`, `ModuleModelBuilder`, and `StandaloneBlockModelBuilder`, can be constructed. This modular approach allows for easy integration and extension, supporting a wide range of code analysis and transformation tasks within the system. The code integrates with custom models from the `fenec.models.models` module, ensuring that the system can handle a wide range of code structures while maintaining a common interface and shared functionality across different model builders.",
    "children_ids": [
        "fenec:python_parser:model_builders:base_model_builder.py__*__MODULE__*__STANDALONE_CODE_BLOCK-1",
        "fenec:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder"
    ]
}